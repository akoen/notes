#+setupfile: ../../hugo_setup.org
#+title: The Pragmatic Programmer

- author :: David Thomas, Andrew Hunt
- tags :: [[file:../programming.org][§Programming]]

* Notes

- Software rot—a project's slow but inevitable decline into disarray—is caused by a single entropy source.
  - This is [[file:../broken_windows_theory.org][§Broken Windows Theory]]

  - *Fix small bugs immediately.*

- Continually invest in your knowledge portfolio:
  - Aim to learn at least one language a year.

  - Read technical books.

- Never duplicate information -> Remember the acronym DRY (Don't Repeat Yourself). This applies to:
  - Code <–> Comments :: don't explain code that explains itself.

  - Code <–> Code :: always try to write modular components that can be re-used. Don't write a new function because it requires slightly different functionality than another function.

  - Code <–> Documentation :: when code is updated, documentation is often ignored. Consider how this could be mitigated. Could the code be generated from the documentation i.e. [[file:../literate_programming.org][§Literate Programming]]?

- Similarly, modules should be orthogonal -> try to limit interdependencies between modules. Changing the functionality of one should not affect the others.
  - For example, the GNU utils and Unix programs in general are small and simple but are orthogonal and can be easily chained together.

  - Orthogonality applies equally to team structure. The responsibilities of individual team members should overlap minimally.

  - This is the reasoning behind [[file:../aspect_orientated_programming.org][§Aspect-Orientated Programming]]

- Avoid global data.
  
- Use getters and setters whenever possible to protect private values.

- All decisions and implementations should be reversible. Abstract database functionality so that the choice of vendor is interchangeable, or even allow for changes in language.
